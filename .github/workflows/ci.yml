name: CI

on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
  schedule:
    - cron: '0 3 * * 1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build local image
        run: make build

      - name: Cross-platform build
        run: make build-cross
        env:
          BUILDX_BUILDER: ${{ steps.buildx.outputs.name }}

  security-scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build container image
        run: docker build -t devops-toolbelt:scan .

      - name: Scan image with Trivy
        env:
          TRIVY_IMAGE: aquasec/trivy:0.51.2
        run: |
          set -eo pipefail
          mkdir -p trivy "$HOME/.cache/trivy"
          SCAN_EXIT=0
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$HOME/.cache/trivy":/root/.cache/ \
            -v "$PWD/trivy":/work \
            "$TRIVY_IMAGE" image \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --ignore-unfixed \
            --format json \
            --output /work/trivy-results.json \
            devops-toolbelt:scan || SCAN_EXIT=$?
          SCAN_EXIT=${SCAN_EXIT:-0}
          if [ "$SCAN_EXIT" -gt 1 ]; then
            echo "::error::Trivy scan failed with exit code $SCAN_EXIT"
            exit "$SCAN_EXIT"
          fi
          if [ ! -s trivy/trivy-results.json ]; then
            echo "::error::Trivy scan did not produce a JSON report"
            exit 1
          fi
          docker run --rm \
            -v "$PWD/trivy":/work \
            "$TRIVY_IMAGE" convert \
            --format sarif \
            --output /work/trivy-results.sarif \
            /work/trivy-results.json
          echo "SCAN_EXIT=${SCAN_EXIT}" >> "$GITHUB_ENV"

      - name: Summarise vulnerabilities
        run: |
          if [ ! -s trivy/trivy-results.json ]; then
            {
              echo "## Vulnerability Summary"
              echo "No HIGH/CRITICAL vulnerabilities found."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          jq -r '
            def findings:
              [ .Results[]? | .Vulnerabilities[]? |
                select(.Severity == "CRITICAL" or .Severity == "HIGH") |
                {severity: .Severity, id: .VulnerabilityID, pkg: .PkgName, installed: .InstalledVersion, fixed: (.FixedVersion // "â€”")} ];
            def count_sev($f; $sev): ($f | map(select(.severity == $sev)) | length);
            findings as $f
            | [
                "## Vulnerability Summary",
                "",
                "- CRITICAL: \(count_sev($f; "CRITICAL"))",
                "- HIGH: \(count_sev($f; "HIGH"))",
                ""
              ]
              + (if ($f | length) > 0 then
                   [
                     "| Severity | ID | Package | Installed | Fixed |",
                     "| --- | --- | --- | --- | --- |"
                   ]
                   + (
                     $f
                     | sort_by((if .severity == "CRITICAL" then 0 else 1 end), .id)
                     | .[:10]
                     | map("| \(.severity) | \(.id) | \(.pkg) | \(.installed) | \(.fixed) |")
                   )
                   + (if ($f | length) > 10 then ["", "_Showing 10 of \($f | length) findings._"] else [] end)
                 else
                   ["No HIGH/CRITICAL vulnerabilities found."]
                 end)
            | .[]
          ' trivy/trivy-results.json >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy/trivy-results.json
            trivy/trivy-results.sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy/trivy-results.sarif

      - name: Enforce vulnerability policy
        run: |
          if [ "${SCAN_EXIT:-0}" -ne 0 ]; then
            echo "::error::Trivy detected HIGH/CRITICAL vulnerabilities."
            exit 1
          fi

  publish:
    name: Publish Image
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
